Topics Tackled

-Data Types
-





-------------------------------------------------------------------------------------------------------------
Data Types
-------------------------------------------------------------------------------------------------------------

          A variable in C++ must be assigned a specific type. Type is important because it tells 
          the compiler how to interpret the content of a variable.
          
          
-> int

          int stores whole numbers without decimals. An int variable requires 4 bytes of memory space 
          and ranges from -2³¹ to 2³¹.
          
Example:

            int moonLanding = 1969;
            int age = 18;
            
            
-> double 

          double stores floating-point numbers with decimals. A double varianble requires 8 bytes memory space and is
          sufficient for storing up to 15 decimal digits.
          
Example:

            double pi = 3.1415;
            double height = 1.75;
     
     
-> Type Conversion

          it is possible to convert int into double and vice versa. This is called a type version or a type casting.
          
Example:

            //converting a double to an int
            double a = 3.5;
            int b = (int) a;     //b is now 3
            
            
            //converting an int to a double
            int c = 5;
            double d = (double) c;     //d is now 5.0
            
            
-> char 

          char stores a single character surrounded by single quotes ' '. A char variable requires 1 byte of 
          memory space.
          
Example:

            char first_letter = 'a';
            
            
-> string

          std::string stores a sequence of characters surrounded by double quotes " ".
          
Example:

            #include <string>
            
            std::string message = "Hello World!";
            
            
-> String Methods

          std::string comes with a plethora of useful methods.
          
          -> The + operator can be used to combine strings together. This is called concatenation:
          
          Example:
          
                    std::string first_word = "Hello";
                    std::string second_word = "World";
                    
                    std::string message = first_word + " " + second_word;
                    //message is now "Hello World"
                    
                    
          -> the [] operator can be used to access the character at the specified position in the string:
          
          Example:
          
                    std::string_message = "Hello World";
                    
                    char letter = message[1];
                    // letter is now 'e'
                    
                    
          -> The length() function can be used to get the length of a string.
          
          Example:
          
                    std::string message = "Hello World";
                    
                    int message_length = message.length();
                    //message_length is now 11
                    
                    
-> bool

          boold stores true or false boolean values. A bool variable requires 1 byte of memory space.
          
Example:

            bool underaged = true;
            bool certified = false;
            
            
----------------------------------------------------------------------------------------------------------
Operators
----------------------------------------------------------------------------------------------------------

Arithmetic Operators:


+         	Addition           	x + y     	x plus y

-         	Subtraction       	x - y     	x minus y

*         	Multiplication    	x * y     	x multiplied by y

/         	Division          	x / y     	x divided by y

%         	Modulus	          x % y     	The remainder of x divided by y

++                  Pre-increment     	++x       	Increment x, then return x

--        	Pre-decrement     	--x       	Decrement x, then return x

++        	Post-increment     	x++       	Copy x, then increment x, then return the copy

--        	Post-decrement    	x--       	Copy x, then decrement x, then return the copy



-> Pre vs. Post-Increment


          When placed before the operand, they are called pre-increment and pre decrement operators. The value in the operand is
          incremented or decrement first, and then that operand is returned.
          
Example before operand:

                    int x = 10;
                    
                    //x is decremented to 9 first, and then assigned to y
                    int y = --x;
                    
                    std::cout << x << ' ' << y;
                    
                    
Example after operand:

                    int x = 10;
                    
                    // A copy of x is made first, then x is decremented to 9
                    // Finally the value of the copy (10) is assigned to y
                    int y = x--;
 
                    std::cout << x << ' ' << y;



Assignmnet Operators:

                    
Operator            	Example             	Description

=	                    x = 5	                    Assign 5 to x

+=	                    x += 5	                    Add 5 to existing value of x

-=	                    x -= 5	                    Subtract 5 from existing value of x

*=	                    x *= 5	                    Multiply existing value of x by 5

/=	                    x /= 5	                    Divide existing value of x by 5

%=	                    x %= 5	                    Modulus existing value of x by 5



Example:

               From ->        x = x + 5;
                              y = y * 2;   
                              
                              
               To   ->        x += 5;
                              y *= 2;
                              
                              
Rational Operators:


Operator	          Name	                    Example	          Description
==	          Equal to	                    x == y	          Is x equal to y?

!=	          Not equal to	          x != y	          Is x not equal to y?

>	          Greater than	          x > y	          Is x greater than y?

<	          Less than	                    x < y	          Is x less than y?

>=	          Greater than or equal to	x >= y	          Is x greater than or equal to y?

<=	          Less than or equal to	x <= y	          Is x less than or equal to y?



Logical Operators:


Operator	          Name	          Example	          Description

&&	          Logical AND	x && y	          true if both x and y are true, false otherwise

||	          Logical OR	x || y	          true if either x or y are true, false otherwise

!	          Logical NOT	!x	          true if x is false, or false if x is true


Bitwise Operators:


Operator	          Name	          Example	          Description

<<	          Left shift	x << y	          shift bits in x left by y

>>	          Right shift	x >> y	          shift bits in x right by y

~	          bitwise NOT	~x	          flip all bits in x

&	          bitwise AND	x & y	          each bit in x AND each bit in y

|	          bitwise OR	x | y	          each bit in x OR each bit in y

^	          bitwise XOR	x ^ y	          each bit in x XOR each bit in y

































































