------------------------------------------------------------------------------------------------------
Introduction to Functions
------------------------------------------------------------------------------------------------------

Creating a function

        - While C++ provides many helpful built-in functions, it's never a bad idea to create you own
        user-definced functions to tackle specific tasks. A function is made up of two components:
        
        Declaration
                
                - The function's name, return type, and any parameters. 
                
        Definition
        
                - The body of the function containing the code to be executed. 
                
        
Example:

                void doSomething(){
                
                        std:cout << "Functions are great!\n";
                
                }
                

        Here is a breakdown of the funtion:
        
        > doSomething() - is the name of the function.
        
        > void - means that the function does not have a return value. 
        
        > () - is the parameter list. Since it's empty, this function takes no input parameters. 
        
        > {} - all the codes place within the brackets is the body of the function. 
        

--------------------------------------------------------------------------------------------------------
Calling a function
--------------------------------------------------------------------------------------------------------

To use a function, it needs to be "called" by specifying the function name followed by a pair of parentheses()
and a semicolon ;:

Example:

                // Create a function
                void doSomething() {
                  std::cout << "Functions are great!\n";
                }
 
                int main() {
                  // Call the function
                  doSomething();
                  doSomething();    
                  doSomething();    
                }
        
--------------------------------------------------------------------------------------------------------
Return Type and Value
--------------------------------------------------------------------------------------------------------

The programmer can choose whether a function returns something back to the caller. A function that doesn't return a value should be
declared as a void function. 

        A function that returns a value need to have two things:
        
        Return type
        
                - The type defined before the function’s name. Just like variables, functions can take on 
                data types like int, double, and bool.

        Return value
        
                - The specific value returned from the function using the return keyword. The type of this
                return value must match the function’s return type.
                
                
Example:

                double valueOfPi() {
                  return 3.1415;
                }
 
                int main() {
                 double pi = valueOfPi();
                 std::cout << pi;  // Output: 3.1415
                }

------------------------------------------------------------------------------------------------------------
Function Scope
------------------------------------------------------------------------------------------------------------

Scope defines the region of code that can access or view a given variable. Function scope is no different from other types of
scopes; variables declared inside a function are only accessible inside that function. If we try to reference a function
variable outside the funtion scope, the C++ compiler will output an error message. 

Example:

               int lucky() {
                  int lucky_number = 7;
                  return lucky_number;
                }
 
                int main() {
                  //Error: variable lucky_number is not in the scope of main()
                  std::cout << lucky_number; 
 
                  return 0;
                } 


--------------------------------------------------------------------------------------------------------------
Function Parameters
---------------------------------------------------------------------------------------------------------------

In C++, Function parameters are variables that act as placeholders for input values passed to a function. 
They act as variables inside a function. 


--------------------------------------------------------------------------------
Parameters and Arguments 
--------------------------------------------------------------------------------

Parameters

        - Function parameters are defined in the function declaration and placed inside the parentheses ()
        after the function name. Each parameter must be defined with a name and a data type, just like regular variables. 
        
        
Example:

                 int feetToInches(int ft) {
                  return ft * 12;
                 }

Arguments 

        - A function argument is a value that is passed to the function when performing a function call. 
        Arguments must be the same data type as the parameters. 
        
        
Example:

                int feetToInches(int ft) {
                  return ft * 12;
                }
 
                int main() {
                  std::cout << feetToInches(6);    // Prints: 72
                }


--------------------------------------------------------------------------------------------------------
Multiple Parameters
--------------------------------------------------------------------------------------------------------

Functions can have more than one parameters. Multiple parameters in a function declaration need to be comma-separated:

Example:

                double totalPrice(int items, double price, bool discount) {
                  if (discount) {
                    return 0.8 * items * price;
                  }
                  else {
                    return items * price;
                  }
                }

        
        When calling a function with multiple parameters, keep two things in mind:
        
                > The function call must include the same number of arguments as there are parameters
                
                > The corresponding arguments must be passed in the same order. 


        For example, a call to the totalPrice() function would look like this:
        
                totalPrice(10, 4.99, true);



-----------------------------------------------------------------------------------------------------
Default Parameters
-----------------------------------------------------------------------------------------------------

Default parameters make it possible to call a function without including all the arguments. Any argument absent from the
function call is replaced with the dafault value associated with that parameter:


Example:

                void message(std::string language = "C++") {
                  std::cout << "I like to code with " << language << "\n";
                }
 
                int main() {
                  // Function call without an argument
                  message();    // Output: I like to code with C++
 
                  // Function call with an argument
                  message("Java");    // Output: I like to code with Java
                }


        When the message() function is called without any arguments, the language parameter will take on the default value "C++".
        

--------------------------------------------------------------------------------------------------------
Pass by Reference
--------------------------------------------------------------------------------------------------------

Pass by reference allows a function to modify the value of its argument variables.
Use the reference operator "&" to indicate that a parameter is passed by reference. 


Example:

                void swap(int &i, int &j) {
                  int temp = i;
                  i = j;
                  j = temp;
                }
 
                int main() {
                  int first = 10;
                  int second = 20;
 
                 std::cout << "Before swap: " << first << " " << second << "\n";
 
                  // Call the function and swap the values of first and second
                  swap(first, second);
                 
                  std::cout << "After swap: " << first << " " << second << "\n";
                }


swap()

        - is a function that swap the values of the first and second.


------------------------------------------------------------------------------------------
Function Overloading
------------------------------------------------------------------------------------------

In C++, function overloading allows multiple functions to have the same name as long as they differ in their parameters.
It enables functions to handle different types/numbers of inputs.


Function Overloading

In the following example, the add() function is overloaded to add numbers of different types: 

Example:

                // Adds two int values
                int add(int a, int b) {
                  return a + b;
                }
 
                // Adds two double values
                double add(double a, double b) {
                  return a + b;
                }



Overload Differentiation

        In order to differentiate overload functions, at least one of the following properties must be true:
        
                > Each function has different types of parameters.
                
                > Each function has a different number of parameters. 
                
                
        For example, the add() function in the previous example can be overloaded once more by adding an extra parameter:
        
        
Example: 

                // Adds two int values
                int add(int a, int b) {
                  return a + b;
                }
                 
                // Adds three int values
                int add(int a, int b, int c) {
                  return a + b + c;
                }



Overload Resolution

When calling an overloaded function, the compiler will attempt to match the function call to the correct overload 
based on the type and the number of arguments passed in the function call. This is known as overload resolution:        


Example:

                int add(int a, int b) {
                  return a + b;
                }
 
                double add(double a, double b) {
                  return a + b;
                }
                 
                int main() {
                  std::cout << add(3, 2);     // Calls add(int, int)
                  std::cout << "\n";
                  std::cout << add(5.3, 1.4);     // Calls add(double, double)
                }


---------------------------------------------------------------------------------------------------------
Command line Arguments
---------------------------------------------------------------------------------------------------------









































































